{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport Parent from '../components/parent.js';\nimport Layout from '../components/layout';\nimport data from '../data/artistList.js';\nimport newsData from '../data/news.js';\nimport store from '../data/store.js';\nimport '../scroll.js';\nimport '../css/normalize.css';\nimport '../css/skeleton.css';\nimport '../css/bootstrap.css';\nimport '../css/style.css';\nimport '../css/styleStore.css';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      trigger: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {\n      this.art = data;\n      this.news = newsData;\n      this.store = store;\n      var loc = window.location.pathname;\n\n      if (loc == '/') {\n        var doSomething = function doSomething(scroll_pos) {\n          pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n        };\n\n        // var count = 0;\n        var moveIndicator = function moveIndicator(item, color) {\n          var textPosition = item.getBoundingClientRect();\n          var container = pnProductNavContents.getBoundingClientRect().left;\n          var distance = textPosition.left - container;\n          var scroll = pnProductNavContents.scrollLeft;\n          pnIndicator.style.transform = \"translateX(\" + (distance + scroll) + \"px) scaleX(\" + textPosition.width * 0.01 + \")\"; // count = count += 100;\n          // pnIndicator.style.transform = \"translateX(\" + count + \"px)\";\n\n          if (color) {\n            pnIndicator.style.backgroundColor = color;\n          }\n        };\n\n        var determineOverflow = function determineOverflow(content, container) {\n          var containerMetrics = container.getBoundingClientRect();\n          var containerMetricsRight = Math.floor(containerMetrics.right);\n          var containerMetricsLeft = Math.floor(containerMetrics.left);\n          var contentMetrics = content.getBoundingClientRect();\n          var contentMetricsRight = Math.floor(contentMetrics.right);\n          var contentMetricsLeft = Math.floor(contentMetrics.left);\n\n          if (containerMetricsLeft > contentMetricsLeft && containerMetricsRight < contentMetricsRight) {\n            return \"both\";\n          } else if (contentMetricsLeft < containerMetricsLeft) {\n            return \"left\";\n          } else if (contentMetricsRight > containerMetricsRight) {\n            return \"right\";\n          } else {\n            return \"none\";\n          }\n        };\n\n        console.log(loc);\n        var SETTINGS = {\n          navBarTravelling: false,\n          navBarTravelDirection: \"\",\n          navBarTravelDistance: 500\n        };\n        var colours = {\n          0: \"#867100\",\n          1: \"#7F4200\",\n          2: \"#99813D\",\n          3: \"#40FEFF\",\n          4: \"#14CC99\",\n          5: \"#00BAFF\",\n          6: \"#0082B2\",\n          7: \"#B25D7A\",\n          8: \"#00FF17\",\n          9: \"#006B49\",\n          10: \"#00B27A\",\n          11: \"#996B3D\",\n          12: \"#CC7014\",\n          13: \"#40FF8C\",\n          14: \"#FF3400\",\n          15: \"#ECBB5E\",\n          16: \"#ECBB0C\",\n          17: \"#B9D912\",\n          18: \"#253A93\",\n          19: \"#125FB9\"\n        };\n        document.documentElement.classList.remove(\"no-js\");\n        document.documentElement.classList.add(\"js\"); // Out advancer buttons\n\n        var pnAdvancerLeft = document.getElementById(\"pnAdvancerLeft\");\n        var pnAdvancerRight = document.getElementById(\"pnAdvancerRight\"); // the indicator\n\n        var pnIndicator = document.getElementById(\"pnIndicator\");\n        var pnProductNav = document.getElementById(\"pnProductNav\");\n        var pnProductNavContents = document.getElementById(\"pnProductNavContents\");\n        pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav)); // Set the indicator\n\n        moveIndicator(pnProductNav.querySelector(\"[aria-selected=\\\"true\\\"]\"), colours[0]); // Handle the scroll of the horizontal container\n\n        var last_known_scroll_position = 0;\n        var ticking = false;\n        pnProductNav.addEventListener(\"scroll\", function () {\n          last_known_scroll_position = window.scrollY;\n\n          if (!ticking) {\n            window.requestAnimationFrame(function () {\n              doSomething(last_known_scroll_position);\n              ticking = false;\n            });\n          }\n\n          ticking = true;\n        });\n        pnAdvancerLeft.addEventListener(\"click\", function () {\n          // If in the middle of a move return\n          if (SETTINGS.navBarTravelling === true) {\n            return;\n          } // If we have content overflowing both sides or on the left\n\n\n          if (determineOverflow(pnProductNavContents, pnProductNav) === \"left\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n            // Find how far this panel has been scrolled\n            var availableScrollLeft = pnProductNav.scrollLeft; // If the space available is less than two lots of our desired distance, just move the whole amount\n            // otherwise, move by the amount in the settings\n\n            if (availableScrollLeft < SETTINGS.navBarTravelDistance * 2) {\n              pnProductNavContents.style.transform = \"translateX(\" + availableScrollLeft + \"px)\";\n            } else {\n              pnProductNavContents.style.transform = \"translateX(\" + SETTINGS.navBarTravelDistance + \"px)\";\n            } // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n\n\n            pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\"); // Update our settings\n\n            SETTINGS.navBarTravelDirection = \"left\";\n            SETTINGS.navBarTravelling = true;\n          } // Now update the attribute in the DOM\n\n\n          pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n        });\n        pnAdvancerRight.addEventListener(\"click\", function () {\n          console.log('slave'); // If in the middle of a move return\n\n          if (SETTINGS.navBarTravelling === true) {\n            return;\n          } // If we have content overflowing both sides or on the right\n\n\n          if (determineOverflow(pnProductNavContents, pnProductNav) === \"right\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n            // Get the right edge of the container and content\n            var navBarRightEdge = pnProductNavContents.getBoundingClientRect().right;\n            var navBarScrollerRightEdge = pnProductNav.getBoundingClientRect().right; // Now we know how much space we have available to scroll\n\n            var availableScrollRight = Math.floor(navBarRightEdge - navBarScrollerRightEdge); // If the space available is less than two lots of our desired distance, just move the whole amount\n            // otherwise, move by the amount in the settings\n\n            if (availableScrollRight < SETTINGS.navBarTravelDistance * 2) {\n              pnProductNavContents.style.transform = \"translateX(-\" + availableScrollRight + \"px)\";\n            } else {\n              pnProductNavContents.style.transform = \"translateX(-\" + SETTINGS.navBarTravelDistance + \"px)\";\n            } // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n\n\n            pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\"); // Update our settings\n\n            SETTINGS.navBarTravelDirection = \"right\";\n            SETTINGS.navBarTravelling = true;\n          } // Now update the attribute in the DOM\n\n\n          pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n        });\n        pnProductNavContents.addEventListener(\"transitionend\", function () {\n          // get the value of the transform, apply that to the current scroll position (so get the scroll pos first) and then remove the transform\n          var styleOfTransform = window.getComputedStyle(pnProductNavContents, null);\n          var tr = styleOfTransform.getPropertyValue(\"-webkit-transform\") || styleOfTransform.getPropertyValue(\"transform\"); // If there is no transition we want to default to 0 and not null\n\n          var amount = Math.abs(_parseInt(tr.split(\",\")[4]) || 0);\n          pnProductNavContents.style.transform = \"none\";\n          pnProductNavContents.classList.add(\"pn-ProductNav_Contents-no-transition\"); // Now lets set the scroll position\n\n          if (SETTINGS.navBarTravelDirection === \"left\") {\n            pnProductNav.scrollLeft = pnProductNav.scrollLeft - amount;\n          } else {\n            pnProductNav.scrollLeft = pnProductNav.scrollLeft + amount;\n          }\n\n          SETTINGS.navBarTravelling = false;\n        }, false); // Handle setting the currently active link\n\n        pnProductNavContents.addEventListener(\"click\", function (e) {\n          var links = [].slice.call(document.querySelectorAll(\".pn-ProductNav_Link\"));\n          links.forEach(function (item) {\n            item.setAttribute(\"aria-selected\", \"false\");\n          });\n          e.target.setAttribute(\"aria-selected\", \"true\"); // Pass the clicked item and it's colour to the move indicator function\n\n          moveIndicator(e.target, colours[links.indexOf(e.target)]);\n        });\n\n        (function (root, factory) {\n          if (typeof define === 'function' && define.amd) {\n            define(['exports'], factory);\n          } else if (typeof exports !== 'undefined') {\n            factory(exports);\n          } else {\n            factory(root.dragscroll = {});\n          }\n        })(this, function (exports) {\n          var _window = window;\n          var _document = document;\n          var mousemove = 'mousemove';\n          var mouseup = 'mouseup';\n          var mousedown = 'mousedown';\n          var EventListener = 'EventListener';\n          var addEventListener = 'add' + EventListener;\n          var removeEventListener = 'remove' + EventListener;\n          var newScrollX, newScrollY;\n          var dragged = [];\n\n          var reset = function reset(i, el) {\n            for (i = 0; i < dragged.length;) {\n              el = dragged[i++];\n              el = el.container || el;\n              el[removeEventListener](mousedown, el.md, 0);\n\n              _window[removeEventListener](mouseup, el.mu, 0);\n\n              _window[removeEventListener](mousemove, el.mm, 0);\n            } // cloning into array since HTMLCollection is updated dynamically\n\n\n            dragged = [].slice.call(_document.getElementsByClassName('dragscroll'));\n\n            for (i = 0; i < dragged.length;) {\n              (function (el, lastClientX, lastClientY, pushed, scroller, cont) {\n                (cont = el.container || el)[addEventListener](mousedown, cont.md = function (e) {\n                  if (!el.hasAttribute('nochilddrag') || _document.elementFromPoint(e.pageX, e.pageY) == cont) {\n                    pushed = 1;\n                    lastClientX = e.clientX;\n                    lastClientY = e.clientY;\n                    e.preventDefault();\n                  }\n                }, 0);\n\n                _window[addEventListener](mouseup, cont.mu = function () {\n                  pushed = 0;\n                }, 0);\n\n                _window[addEventListener](mousemove, cont.mm = function (e) {\n                  if (pushed) {\n                    (scroller = el.scroller || el).scrollLeft -= newScrollX = -lastClientX + (lastClientX = e.clientX);\n                    scroller.scrollTop -= newScrollY = -lastClientY + (lastClientY = e.clientY);\n\n                    if (el == _document.body) {\n                      (scroller = _document.documentElement).scrollLeft -= newScrollX;\n                      scroller.scrollTop -= newScrollY;\n                    }\n                  }\n                }, 0);\n              })(dragged[i++]);\n            }\n          };\n\n          if (_document.readyState == 'complete') {\n            reset();\n          } else {\n            _window[addEventListener]('load', reset, 0);\n          }\n\n          exports.reset = reset;\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, null, React.createElement(Parent, {\n        artists: data,\n        news: newsData,\n        store: store\n      }));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}