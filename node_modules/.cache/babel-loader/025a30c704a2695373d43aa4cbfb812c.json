{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n\nif (process.browser) {\n  window.onload = function () {\n    function scroller() {\n      var SETTINGS = {\n        navBarTravelling: false,\n        navBarTravelDirection: \"\",\n        navBarTravelDistance: 500\n      };\n      var colours = {\n        0: \"#867100\",\n        1: \"#7F4200\",\n        2: \"#99813D\",\n        3: \"#40FEFF\",\n        4: \"#14CC99\",\n        5: \"#00BAFF\",\n        6: \"#0082B2\",\n        7: \"#B25D7A\",\n        8: \"#00FF17\",\n        9: \"#006B49\",\n        10: \"#00B27A\",\n        11: \"#996B3D\",\n        12: \"#CC7014\",\n        13: \"#40FF8C\",\n        14: \"#FF3400\",\n        15: \"#ECBB5E\",\n        16: \"#ECBB0C\",\n        17: \"#B9D912\",\n        18: \"#253A93\",\n        19: \"#125FB9\"\n      };\n      document.documentElement.classList.remove(\"no-js\");\n      document.documentElement.classList.add(\"js\"); // Out advancer buttons\n\n      var pnAdvancerLeft = document.getElementById(\"pnAdvancerLeft\");\n      var pnAdvancerRight = document.getElementById(\"pnAdvancerRight\"); // the indicator\n\n      var pnIndicator = document.getElementById(\"pnIndicator\");\n      var pnProductNav = document.getElementById(\"pnProductNav\");\n      var pnProductNavContents = document.getElementById(\"pnProductNavContents\");\n      pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav)); // Set the indicator\n\n      moveIndicator(pnProductNav.querySelector(\"[aria-selected=\\\"true\\\"]\"), colours[0]); // Handle the scroll of the horizontal container\n\n      var last_known_scroll_position = 0;\n      var ticking = false;\n\n      function doSomething(scroll_pos) {\n        pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n      }\n\n      pnProductNav.addEventListener(\"scroll\", function () {\n        last_known_scroll_position = window.scrollY;\n\n        if (!ticking) {\n          window.requestAnimationFrame(function () {\n            doSomething(last_known_scroll_position);\n            ticking = false;\n          });\n        }\n\n        ticking = true;\n      });\n      pnAdvancerLeft.addEventListener(\"click\", function () {\n        // If in the middle of a move return\n        if (SETTINGS.navBarTravelling === true) {\n          return;\n        } // If we have content overflowing both sides or on the left\n\n\n        if (determineOverflow(pnProductNavContents, pnProductNav) === \"left\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n          // Find how far this panel has been scrolled\n          var availableScrollLeft = pnProductNav.scrollLeft; // If the space available is less than two lots of our desired distance, just move the whole amount\n          // otherwise, move by the amount in the settings\n\n          if (availableScrollLeft < SETTINGS.navBarTravelDistance * 2) {\n            pnProductNavContents.style.transform = \"translateX(\" + availableScrollLeft + \"px)\";\n          } else {\n            pnProductNavContents.style.transform = \"translateX(\" + SETTINGS.navBarTravelDistance + \"px)\";\n          } // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n\n\n          pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\"); // Update our settings\n\n          SETTINGS.navBarTravelDirection = \"left\";\n          SETTINGS.navBarTravelling = true;\n        } // Now update the attribute in the DOM\n\n\n        pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n      });\n      pnAdvancerRight.addEventListener(\"click\", function () {\n        console.log('slave'); // If in the middle of a move return\n\n        if (SETTINGS.navBarTravelling === true) {\n          return;\n        } // If we have content overflowing both sides or on the right\n\n\n        if (determineOverflow(pnProductNavContents, pnProductNav) === \"right\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n          // Get the right edge of the container and content\n          var navBarRightEdge = pnProductNavContents.getBoundingClientRect().right;\n          var navBarScrollerRightEdge = pnProductNav.getBoundingClientRect().right; // Now we know how much space we have available to scroll\n\n          var availableScrollRight = Math.floor(navBarRightEdge - navBarScrollerRightEdge); // If the space available is less than two lots of our desired distance, just move the whole amount\n          // otherwise, move by the amount in the settings\n\n          if (availableScrollRight < SETTINGS.navBarTravelDistance * 2) {\n            pnProductNavContents.style.transform = \"translateX(-\" + availableScrollRight + \"px)\";\n          } else {\n            pnProductNavContents.style.transform = \"translateX(-\" + SETTINGS.navBarTravelDistance + \"px)\";\n          } // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n\n\n          pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\"); // Update our settings\n\n          SETTINGS.navBarTravelDirection = \"right\";\n          SETTINGS.navBarTravelling = true;\n        } // Now update the attribute in the DOM\n\n\n        pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n      });\n      pnProductNavContents.addEventListener(\"transitionend\", function () {\n        // get the value of the transform, apply that to the current scroll position (so get the scroll pos first) and then remove the transform\n        var styleOfTransform = window.getComputedStyle(pnProductNavContents, null);\n        var tr = styleOfTransform.getPropertyValue(\"-webkit-transform\") || styleOfTransform.getPropertyValue(\"transform\"); // If there is no transition we want to default to 0 and not null\n\n        var amount = Math.abs(_parseInt(tr.split(\",\")[4]) || 0);\n        pnProductNavContents.style.transform = \"none\";\n        pnProductNavContents.classList.add(\"pn-ProductNav_Contents-no-transition\"); // Now lets set the scroll position\n\n        if (SETTINGS.navBarTravelDirection === \"left\") {\n          pnProductNav.scrollLeft = pnProductNav.scrollLeft - amount;\n        } else {\n          pnProductNav.scrollLeft = pnProductNav.scrollLeft + amount;\n        }\n\n        SETTINGS.navBarTravelling = false;\n      }, false); // Handle setting the currently active link\n\n      pnProductNavContents.addEventListener(\"click\", function (e) {\n        var links = [].slice.call(document.querySelectorAll(\".pn-ProductNav_Link\"));\n        links.forEach(function (item) {\n          item.setAttribute(\"aria-selected\", \"false\");\n        });\n        e.target.setAttribute(\"aria-selected\", \"true\"); // Pass the clicked item and it's colour to the move indicator function\n\n        moveIndicator(e.target, colours[links.indexOf(e.target)]);\n      }); // var count = 0;\n\n      function moveIndicator(item, color) {\n        var textPosition = item.getBoundingClientRect();\n        var container = pnProductNavContents.getBoundingClientRect().left;\n        var distance = textPosition.left - container;\n        var scroll = pnProductNavContents.scrollLeft;\n        pnIndicator.style.transform = \"translateX(\" + (distance + scroll) + \"px) scaleX(\" + textPosition.width * 0.01 + \")\"; // count = count += 100;\n        // pnIndicator.style.transform = \"translateX(\" + count + \"px)\";\n\n        if (color) {\n          pnIndicator.style.backgroundColor = color;\n        }\n      }\n\n      function determineOverflow(content, container) {\n        var containerMetrics = container.getBoundingClientRect();\n        var containerMetricsRight = Math.floor(containerMetrics.right);\n        var containerMetricsLeft = Math.floor(containerMetrics.left);\n        var contentMetrics = content.getBoundingClientRect();\n        var contentMetricsRight = Math.floor(contentMetrics.right);\n        var contentMetricsLeft = Math.floor(contentMetrics.left);\n\n        if (containerMetricsLeft > contentMetricsLeft && containerMetricsRight < contentMetricsRight) {\n          return \"both\";\n        } else if (contentMetricsLeft < containerMetricsLeft) {\n          return \"left\";\n        } else if (contentMetricsRight > containerMetricsRight) {\n          return \"right\";\n        } else {\n          return \"none\";\n        }\n      }\n      /**\n       * @fileoverview dragscroll - scroll area by dragging\n       * @version 0.0.8\n       * \n       * @license MIT, see https://github.com/asvd/dragscroll\n       * @copyright 2015 asvd <heliosframework@gmail.com> \n       */\n\n\n      (function (root, factory) {\n        if (typeof define === 'function' && define.amd) {\n          define(['exports'], factory);\n        } else if (typeof exports !== 'undefined') {\n          factory(exports);\n        } else {\n          factory(root.dragscroll = {});\n        }\n      })(this, function (exports) {\n        var _window = window;\n        var _document = document;\n        var mousemove = 'mousemove';\n        var mouseup = 'mouseup';\n        var mousedown = 'mousedown';\n        var EventListener = 'EventListener';\n        var addEventListener = 'add' + EventListener;\n        var removeEventListener = 'remove' + EventListener;\n        var newScrollX, newScrollY;\n        var dragged = [];\n\n        var reset = function reset(i, el) {\n          for (i = 0; i < dragged.length;) {\n            el = dragged[i++];\n            el = el.container || el;\n            el[removeEventListener](mousedown, el.md, 0);\n\n            _window[removeEventListener](mouseup, el.mu, 0);\n\n            _window[removeEventListener](mousemove, el.mm, 0);\n          } // cloning into array since HTMLCollection is updated dynamically\n\n\n          dragged = [].slice.call(_document.getElementsByClassName('dragscroll'));\n\n          for (i = 0; i < dragged.length;) {\n            (function (el, lastClientX, lastClientY, pushed, scroller, cont) {\n              (cont = el.container || el)[addEventListener](mousedown, cont.md = function (e) {\n                if (!el.hasAttribute('nochilddrag') || _document.elementFromPoint(e.pageX, e.pageY) == cont) {\n                  pushed = 1;\n                  lastClientX = e.clientX;\n                  lastClientY = e.clientY;\n                  e.preventDefault();\n                }\n              }, 0);\n\n              _window[addEventListener](mouseup, cont.mu = function () {\n                pushed = 0;\n              }, 0);\n\n              _window[addEventListener](mousemove, cont.mm = function (e) {\n                if (pushed) {\n                  (scroller = el.scroller || el).scrollLeft -= newScrollX = -lastClientX + (lastClientX = e.clientX);\n                  scroller.scrollTop -= newScrollY = -lastClientY + (lastClientY = e.clientY);\n\n                  if (el == _document.body) {\n                    (scroller = _document.documentElement).scrollLeft -= newScrollX;\n                    scroller.scrollTop -= newScrollY;\n                  }\n                }\n              }, 0);\n            })(dragged[i++]);\n          }\n        };\n\n        if (_document.readyState == 'complete') {\n          reset();\n        } else {\n          _window[addEventListener]('load', reset, 0);\n        }\n\n        exports.reset = reset;\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/Users/peterhahn/src/new/audio-boy/scroll.js"],"names":["process","browser","window","onload","scroller","SETTINGS","navBarTravelling","navBarTravelDirection","navBarTravelDistance","colours","document","documentElement","classList","remove","add","pnAdvancerLeft","getElementById","pnAdvancerRight","pnIndicator","pnProductNav","pnProductNavContents","setAttribute","determineOverflow","moveIndicator","querySelector","last_known_scroll_position","ticking","doSomething","scroll_pos","addEventListener","scrollY","requestAnimationFrame","availableScrollLeft","scrollLeft","style","transform","console","log","navBarRightEdge","getBoundingClientRect","right","navBarScrollerRightEdge","availableScrollRight","Math","floor","styleOfTransform","getComputedStyle","tr","getPropertyValue","amount","abs","split","e","links","slice","call","querySelectorAll","forEach","item","target","indexOf","color","textPosition","container","left","distance","scroll","width","backgroundColor","content","containerMetrics","containerMetricsRight","containerMetricsLeft","contentMetrics","contentMetricsRight","contentMetricsLeft","root","factory","define","amd","exports","dragscroll","_window","_document","mousemove","mouseup","mousedown","EventListener","removeEventListener","newScrollX","newScrollY","dragged","reset","i","el","length","md","mu","mm","getElementsByClassName","lastClientX","lastClientY","pushed","cont","hasAttribute","elementFromPoint","pageX","pageY","clientX","clientY","preventDefault","scrollTop","body","readyState"],"mappings":"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","sourcesContent":["if (process.browser){\n\nwindow.onload = function(){\n\nfunction scroller(){\nvar SETTINGS = {\n    navBarTravelling: false,\n    navBarTravelDirection: \"\",\n     navBarTravelDistance: 500\n}\n\nvar colours = {\n    0: \"#867100\",\n    1: \"#7F4200\",\n    2: \"#99813D\",\n    3: \"#40FEFF\",\n    4: \"#14CC99\",\n    5: \"#00BAFF\",\n    6: \"#0082B2\",\n    7: \"#B25D7A\",\n    8: \"#00FF17\",\n    9: \"#006B49\",\n    10: \"#00B27A\",\n    11: \"#996B3D\",\n    12: \"#CC7014\",\n    13: \"#40FF8C\",\n    14: \"#FF3400\",\n    15: \"#ECBB5E\",\n    16: \"#ECBB0C\",\n    17: \"#B9D912\",\n    18: \"#253A93\",\n    19: \"#125FB9\",\n}\n\ndocument.documentElement.classList.remove(\"no-js\");\ndocument.documentElement.classList.add(\"js\");\n\n// Out advancer buttons\nvar pnAdvancerLeft = document.getElementById(\"pnAdvancerLeft\");\nvar pnAdvancerRight = document.getElementById(\"pnAdvancerRight\");\n// the indicator\nvar pnIndicator = document.getElementById(\"pnIndicator\");\n\nvar pnProductNav = document.getElementById(\"pnProductNav\");\nvar pnProductNavContents = document.getElementById(\"pnProductNavContents\");\n\npnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n\n// Set the indicator\nmoveIndicator(pnProductNav.querySelector(\"[aria-selected=\\\"true\\\"]\"), colours[0]);\n\n// Handle the scroll of the horizontal container\nvar last_known_scroll_position = 0;\nvar ticking = false;\n\nfunction doSomething(scroll_pos) {\n    pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n}\n\npnProductNav.addEventListener(\"scroll\", function() {\n    last_known_scroll_position = window.scrollY;\n    if (!ticking) {\n        window.requestAnimationFrame(function() {\n            doSomething(last_known_scroll_position);\n            ticking = false;\n        });\n    }\n    ticking = true;\n});\n\n\npnAdvancerLeft.addEventListener(\"click\", function() {\n    // If in the middle of a move return\n    if (SETTINGS.navBarTravelling === true) {\n        return;\n    }\n    // If we have content overflowing both sides or on the left\n    if (determineOverflow(pnProductNavContents, pnProductNav) === \"left\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n        // Find how far this panel has been scrolled\n        var availableScrollLeft = pnProductNav.scrollLeft;\n        // If the space available is less than two lots of our desired distance, just move the whole amount\n        // otherwise, move by the amount in the settings\n        if (availableScrollLeft < SETTINGS.navBarTravelDistance * 2) {\n            pnProductNavContents.style.transform = \"translateX(\" + availableScrollLeft + \"px)\";\n        } else {\n            pnProductNavContents.style.transform = \"translateX(\" + SETTINGS.navBarTravelDistance + \"px)\";\n        }\n        // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n        pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n        // Update our settings\n        SETTINGS.navBarTravelDirection = \"left\";\n        SETTINGS.navBarTravelling = true;\n    }\n    // Now update the attribute in the DOM\n    pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n});\n\npnAdvancerRight.addEventListener(\"click\", function() {\n\tconsole.log('slave');\n    // If in the middle of a move return\n    if (SETTINGS.navBarTravelling === true) {\n        return;\n    }\n    // If we have content overflowing both sides or on the right\n    if (determineOverflow(pnProductNavContents, pnProductNav) === \"right\" || determineOverflow(pnProductNavContents, pnProductNav) === \"both\") {\n        // Get the right edge of the container and content\n        var navBarRightEdge = pnProductNavContents.getBoundingClientRect().right;\n        var navBarScrollerRightEdge = pnProductNav.getBoundingClientRect().right;\n        // Now we know how much space we have available to scroll\n        var availableScrollRight = Math.floor(navBarRightEdge - navBarScrollerRightEdge);\n        // If the space available is less than two lots of our desired distance, just move the whole amount\n        // otherwise, move by the amount in the settings\n        if (availableScrollRight < SETTINGS.navBarTravelDistance * 2) {\n            pnProductNavContents.style.transform = \"translateX(-\" + availableScrollRight + \"px)\";\n        } else {\n            pnProductNavContents.style.transform = \"translateX(-\" + SETTINGS.navBarTravelDistance + \"px)\";\n        }\n        // We do want a transition (this is set in CSS) when moving so remove the class that would prevent that\n        pnProductNavContents.classList.remove(\"pn-ProductNav_Contents-no-transition\");\n        // Update our settings\n        SETTINGS.navBarTravelDirection = \"right\";\n        SETTINGS.navBarTravelling = true;\n    }\n    // Now update the attribute in the DOM\n    pnProductNav.setAttribute(\"data-overflowing\", determineOverflow(pnProductNavContents, pnProductNav));\n});\n\npnProductNavContents.addEventListener(\n    \"transitionend\",\n    function() {\n        // get the value of the transform, apply that to the current scroll position (so get the scroll pos first) and then remove the transform\n        var styleOfTransform = window.getComputedStyle(pnProductNavContents, null);\n        var tr = styleOfTransform.getPropertyValue(\"-webkit-transform\") || styleOfTransform.getPropertyValue(\"transform\");\n        // If there is no transition we want to default to 0 and not null\n        var amount = Math.abs(parseInt(tr.split(\",\")[4]) || 0);\n        pnProductNavContents.style.transform = \"none\";\n        pnProductNavContents.classList.add(\"pn-ProductNav_Contents-no-transition\");\n        // Now lets set the scroll position\n        if (SETTINGS.navBarTravelDirection === \"left\") {\n            pnProductNav.scrollLeft = pnProductNav.scrollLeft - amount;\n        } else {\n            pnProductNav.scrollLeft = pnProductNav.scrollLeft + amount;\n        }\n        SETTINGS.navBarTravelling = false;\n    },\n    false\n);\n\n// Handle setting the currently active link\npnProductNavContents.addEventListener(\"click\", function(e) {\n    var links = [].slice.call(document.querySelectorAll(\".pn-ProductNav_Link\"));\n    links.forEach(function(item) {\n        item.setAttribute(\"aria-selected\", \"false\");\n    })\n    e.target.setAttribute(\"aria-selected\", \"true\");\n    // Pass the clicked item and it's colour to the move indicator function\n    moveIndicator(e.target, colours[links.indexOf(e.target)]);\n});\n\n// var count = 0;\nfunction moveIndicator(item, color) {\n    var textPosition = item.getBoundingClientRect();\n    var container = pnProductNavContents.getBoundingClientRect().left;\n    var distance = textPosition.left - container;\n     var scroll = pnProductNavContents.scrollLeft;\n    pnIndicator.style.transform = \"translateX(\" + (distance + scroll) + \"px) scaleX(\" + textPosition.width * 0.01 + \")\";\n    // count = count += 100;\n    // pnIndicator.style.transform = \"translateX(\" + count + \"px)\";\n    \n    if (color) {\n        pnIndicator.style.backgroundColor = color;\n    }\n}\n\nfunction determineOverflow(content, container) {\n    var containerMetrics = container.getBoundingClientRect();\n    var containerMetricsRight = Math.floor(containerMetrics.right);\n    var containerMetricsLeft = Math.floor(containerMetrics.left);\n    var contentMetrics = content.getBoundingClientRect();\n    var contentMetricsRight = Math.floor(contentMetrics.right);\n    var contentMetricsLeft = Math.floor(contentMetrics.left);\n     if (containerMetricsLeft > contentMetricsLeft && containerMetricsRight < contentMetricsRight) {\n        return \"both\";\n    } else if (contentMetricsLeft < containerMetricsLeft) {\n        return \"left\";\n    } else if (contentMetricsRight > containerMetricsRight) {\n        return \"right\";\n    } else {\n        return \"none\";\n    }\n}\n\n/**\n * @fileoverview dragscroll - scroll area by dragging\n * @version 0.0.8\n * \n * @license MIT, see https://github.com/asvd/dragscroll\n * @copyright 2015 asvd <heliosframework@gmail.com> \n */\n\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.dragscroll = {}));\n    }\n}(this, function (exports) {\n    var _window = window;\n    var _document = document;\n    var mousemove = 'mousemove';\n    var mouseup = 'mouseup';\n    var mousedown = 'mousedown';\n    var EventListener = 'EventListener';\n    var addEventListener = 'add'+EventListener;\n    var removeEventListener = 'remove'+EventListener;\n    var newScrollX, newScrollY;\n\n    var dragged = [];\n    var reset = function(i, el) {\n        for (i = 0; i < dragged.length;) {\n            el = dragged[i++];\n            el = el.container || el;\n            el[removeEventListener](mousedown, el.md, 0);\n            _window[removeEventListener](mouseup, el.mu, 0);\n            _window[removeEventListener](mousemove, el.mm, 0);\n        }\n\n        // cloning into array since HTMLCollection is updated dynamically\n        dragged = [].slice.call(_document.getElementsByClassName('dragscroll'));\n        for (i = 0; i < dragged.length;) {\n            (function(el, lastClientX, lastClientY, pushed, scroller, cont){\n                (cont = el.container || el)[addEventListener](\n                    mousedown,\n                    cont.md = function(e) {\n                        if (!el.hasAttribute('nochilddrag') ||\n                            _document.elementFromPoint(\n                                e.pageX, e.pageY\n                            ) == cont\n                        ) {\n                            pushed = 1;\n                            lastClientX = e.clientX;\n                            lastClientY = e.clientY;\n\n                            e.preventDefault();\n                        }\n                    }, 0\n                );\n\n                _window[addEventListener](\n                    mouseup, cont.mu = function() {pushed = 0;}, 0\n                );\n\n                _window[addEventListener](\n                    mousemove,\n                    cont.mm = function(e) {\n                        if (pushed) {\n                            (scroller = el.scroller||el).scrollLeft -=\n                                newScrollX = (- lastClientX + (lastClientX=e.clientX));\n                            scroller.scrollTop -=\n                                newScrollY = (- lastClientY + (lastClientY=e.clientY));\n                            if (el == _document.body) {\n                                (scroller = _document.documentElement).scrollLeft -= newScrollX;\n                                scroller.scrollTop -= newScrollY;\n                            }\n                        }\n                    }, 0\n                );\n             })(dragged[i++]);\n        }\n    }\n\n      \n    if (_document.readyState == 'complete') {\n        reset();\n    } else {\n        _window[addEventListener]('load', reset, 0);\n    }\n\n    exports.reset = reset;\n}));\n}\n}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}